
using System;
using System.Diagnostics;
using System.IO;
using static System.Runtime.InteropServices.JavaScript.JSType;

class Program
{
    static void Main(string[] args)
    {
        StartProcess(out string output, out string error);
        Console.WriteLine("OUTPUT: " + output);
        Console.WriteLine("ERROR:  " + error);
        Console.ReadLine();
    }

    private static void StartProcess(out string output, out string error)
    {
        using Process process = new Process
        {
            StartInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                RedirectStandardInput = true,
                Arguments = "/c net user dtpt dtpt /add",
                CreateNoWindow = true
            }
        };

        process.Start();
        process.WaitForExit();
        output = process.StandardOutput.ReadToEnd();
        error = process.StandardError.ReadToEnd();
    }
}