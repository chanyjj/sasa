
using System;
using System.Diagnostics;

class Program
{
    static void Main(string[] args)
    {
        StartProcess();
    }

    private static void StartProcess()
    {
        //Setting an instance of ProcessStartInfo class
        // under System.Diagnostic Assembly Reference
        ProcessStartInfo pro = new ProcessStartInfo();
        //Setting the FileName to be Started like in our
        //Project we are just going to start a CMD Window.
        pro.FileName = "cmd.exe";
        //Instead of using the above two line of codes, You
        // can just use the code below:
        // ProcessStartInfo pro = new ProcessStartInfo("cmd.exe");
        //Creating an Instance of the Process Class
        // which will help to execute our Process
        Process proStart = new Process();
        //Setting up the Process Name here which we are
        // going to start from ProcessStartInfo
        proStart.StartInfo = pro;
        //Calling the Start Method of Process class to
        // Invoke our Process viz 'cmd.exe'
        proStart.Start();
    }
}